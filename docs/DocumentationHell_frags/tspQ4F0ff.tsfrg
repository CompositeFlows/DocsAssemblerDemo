---
layout: null
permalink: /DocumentationHell_frags/tspQ4F0ff.html
---


<!-- tsFragmentRenderComment {"id":"tspQ4F0ff","topLevelMapKey":"sIhxfx02EB","mapKeyChain":"sIhxfx02EB","guideID":"tspQ3q0JA","guidePath":"c:/GitHub/MuddySpud/MuddySpud.github.io/tsmaps/DocumentationHell.tsmap","chartKey":"sIhxfx02EB","isLeaf":false,"options":[{"id":"tspQ5T0yu","order":1},{"id":"tspQ89163","option":"What are Hallucinations?","order":2,"isAncillary":true}]} -->

#### This challenge manifests everywhere

But for developers, it’s a daily reality. It’s not just about writing docs — it’s about maintaining them. You’re likely all too familiar with the symptoms:

*   **Sprawling, duplicated content** that multiplies across guides, manuals, and wikis, making it impossible to know what’s accurate.
*   **Bug-prone updates:** You make a critical edit in one place, only to miss that same information duplicated in other files, instantly introducing inconsistencies.
*   **Brittle, unmanageable docs** that collapse under their own weight when you try to document complex, branching real-world scenarios.
*   **Wasting precious time** wrestling with static site generators and build scripts instead of writing code and building features.

What if you could solve this by applying the proven principles of software engineering directly to your documentation?

That’s the core idea behind [Docs Assembler](https://marketplace.visualstudio.com/items?itemName=netoftrees.documentation-assembler), a VS Code extension designed to help you build documentation systems with **modular, reusable components**. Think of it as bringing **class-based inheritance** to your content. It allows you to create a system where your documentation is as maintainable and scalable as your codebase.

## Designed for Developers, by Developers

The design of [Docs Assembler](https://marketplace.visualstudio.com/items?itemName=netoftrees.documentation-assembler) was driven by a fundamental need from teams like [HAL Robotics](https://hal-robotics.com): to have a powerful system that *respects developer workflows and sovereignty*. This isn't just a platform; it's a philosophy built on core principles that will feel immediately right:

*   **Familiarity & Control:** The entire system is built on the tools you already know and trust. Your documentation lives in **Git repos**, right alongside your code. Content is written in **Markdown files**, editable in any editor. Structure is defined in **JSON files** you can view and edit manually.
*   **Absolute Ownership:** You have **physical possession of your documentation**. It's your Markdown and JSON in your repo. You are never trapped in a subscription or held ransom by a SaaS platform.
*   **Zero Lock-In:** This is a critical feature. **There are no consequences if you stop using Docs Assembler.** Since it publishes to standard Markdown, you can uninstall the extension and your documentation is still perfectly usable, editable, and ready for any other static site generator. Your content is always yours.
*   **Seamless Publishing:** It’s designed to publish directly to **GitHub Pages**, a platform developers already understand. Even Liquid scripts embedded in your Markdown work as expected.
*   **Built to Scale:** Like classes break down massive software systems, Docs Assembler's modules are designed to decompose enormous documentation sets into manageable, distributable units that different teams can own.
*   **Engineering Rigour:** It brings true software tooling to docs, with **IntelliSense for variables, full validation before publish, and automatic adjustment of relative URLs**, preventing broken links and ensuring robustness.

## How It Works: The Building Blocks

[Docs Assembler](https://marketplace.visualstudio.com/items?itemName=netoftrees.documentation-assembler) introduces key concepts that leverage this philosophy:

*   **Maps (.tsmap files):** These are the core building blocks — self-contained documentation modules (JSON files) that can be nested and composed, just like classes. Each Map can encapsulate anything from a simple procedure to an entire troubleshooting tutorial.
*   **Variables:** Define reusable text snippets for product names, common phrases, or URLs. Change the variable in one place, and that change propagates everywhere it’s referenced, eliminating an entire class of errors.
*   **Inheritance & Composition:** Build sophisticated guides from simple, reusable blocks. A change to a base “Map” automatically propagates to all guides that use it.
*   **Compile to Docs:** The system assembles these components on-the-fly into clean, standard Markdown (a process akin to compiling code), ready for GitHub Pages. The result? You **maintain a single source of truth for your documentation**, not a dozen fractured copies.

## What is the ultimate aim?

**This is more than just better documentation. [Docs Assembler](https://marketplace.visualstudio.com/items?itemName=netoftrees.documentation-assembler) is a Decision Intelligence Platform. It’s about creating a structured, actionable authoritative frame of reference for complex operations.**

Consider managing emergencies at an oil refinery. The variables are endless: fires, explosions, earthquakes, power loss, IT failures, medical emergencies. The number of internal teams — incident commanders, operators, maintenance, security, medical, PR, IT, legal, HR — is large, and each needs tailored, timely steps. External stakeholders like emergency services and media introduce more jurisdiction-specific requirements. Add in site variability like equipment locations and local laws, and the complexity is staggering.

**Now imagine capturing all of that in a single, maintainable system.** Each team builds and maintains their own domain-specific maps. The result is a unified, validated, and always up-to-date source of truth that can guide an entire organisation through a crisis.

This structured knowledge base is also the perfect foundation for the future. On top of it, you could have a guide front-end (as shown in the HAL example) or a powerful **conversational interface powered by a Graph-Augmented LLM** — an AI that can answer complex questions and generate precise guidance because it’s grounded in your company’s Graph-Based Knowledge, not just general information. This grounding in a verifiable source of truth is the most effective method to dramatically reduce the hallucinations that can plague even advanced LLMs.

**This is the destination: turning trapped expertise into a dynamic, accurate, and actionable intelligent asset.**

