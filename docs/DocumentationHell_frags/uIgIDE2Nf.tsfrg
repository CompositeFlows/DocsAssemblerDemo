---
layout: null
permalink: /DocumentationHell_frags/uIgIDE2Nf.html
---


<!-- tsFragmentRenderComment {"id":"uIgIDE2Nf","topLevelMapKey":"sIhxfx02EB","mapKeyChain":"sIhxfx02EB","guideID":"uIgI9F0UM","guidePath":"c:/GitHub/MuddySpud/MuddySpud.github.io/tsmaps/DocumentationHell.tsmap","parentFragmentID":"uIgICQ0pF","chartKey":"sIhxfx02EB","isLeaf":false,"options":[{"id":"uIgIDT1zn","order":1},{"id":"uIgIDd0qL","option":"Show this step...","order":2,"isAncillary":true}]} -->

## This Website is *A* Single Guide


This website is not just talking about [Docs Assembler](https://marketplace.visualstudio.com/items?itemName=netoftrees.documentation-assembler) â€” it is a live, functioning example of it. Every piece of text you see has been dynamically assembled from a structure of interconnected maps. This demonstrates how you can create and maintain an expansive documentation system with the same ease and precision as you maintain your codebase.


To see the mechanics in action: Look at this section, 'This Website is *A* Single Guide'. It is a single step in the opening map. Click the ancillary button below labeled 'Show this step...'.

An 'ancillary' is the Docs Assembler's method for letting you expand information on-demand, keeping the main path clean and focused for readers who don't need the extra detail. These ancillary buttons are anchored to the right margin.

Clicking it will open a panel showing a screenshot of this very step open in [Visual Studio Code](https://code.visualstudio.com/). From there, you can continue to drill down into its structure using the ancillary buttons within the panel.


This is the proof. This is what treating docs like code looks like. 
But the true power of this approach extends far beyond managing a simple website.
