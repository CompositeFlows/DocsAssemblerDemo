var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class HookRegistry {
  constructor() {
    __publicField(this, "stepHook", null);
  }
  registerStepHook(hook) {
    this.stepHook = hook;
  }
  executeStepHook(state, step) {
    if (this.stepHook) {
      this.stepHook(
        state,
        step
      );
    }
  }
}
const registerStepHook = () => {
  if (!window.HookRegistry) {
    window.HookRegistry = new HookRegistry();
    window.HookRegistry.registerStepHook(stepHook.processStep);
  }
};
const PROCESS_STEP = "<p>PROCESS_STEP</p>";
const runProcessStep = (step) => {
  let stepText = step.value;
  let firstlineEndIndex = stepText.indexOf("\n");
  let firstLine = "";
  if (firstlineEndIndex === -1) {
    firstLine = stepText;
    stepText = "";
  } else {
    firstLine = stepText.substring(0, firstlineEndIndex);
    stepText = stepText.substring(firstlineEndIndex + 1);
  }
  if (firstLine.trim() === PROCESS_STEP) {
    step.value = stepText;
    return true;
  }
  return false;
};
const printStepVariables = (step, stringOutput) => {
  var _a;
  if (!step.variable || step.variable.length === 0) {
    return null;
  }
  const stepVariables = step.variable;
  let variableOutput = "";
  let start = "";
  let end = "";
  for (const variable of stepVariables) {
    start = "<li>";
    end = "</li>";
    if (variable.length === 1) {
      variableOutput = `${variable[0].trim()} = ${((_a = step.selected) == null ? void 0 : _a.option.trim()) ?? "no option selected"}`;
    } else {
      variableOutput = `${variable[0].trim()} = ${variable[1].trim()}`;
    }
    if (stringOutput.nestingLevel === 0) {
      stringOutput.nestingLevel++;
      start = `<ul>${start}`;
    }
    if (variableOutput.startsWith("frame = 1") === true || variableOutput.startsWith("module = 1") === true || variableOutput.startsWith("cropChoice = ") === true || variableOutput.startsWith("herbBay = 1") === true) {
      end = `${end}<ul>`;
      stringOutput.nestingLevel++;
    } else if (variableOutput.startsWith("cropChoice =") === true) {
      start = `${start}`;
      end = `${end}<ul>`;
      stringOutput.nestingLevel++;
    } else if (variableOutput.startsWith("herbBay = ") === true) {
      start = `</ul>${start}`;
      end = `${end}<ul>`;
    } else if (!variableOutput.startsWith("module = S") && !variableOutput.startsWith("module = D") && variableOutput.startsWith("module =") === true) {
      start = `</ul></ul>${start}`;
      end = `${end}<ul>`;
      stringOutput.nestingLevel--;
    } else if (variableOutput.startsWith("frame =") === true) {
      start = `</ul></ul></ul>${start}`;
      end = `${end}<ul>`;
      stringOutput.nestingLevel--;
      stringOutput.nestingLevel--;
    }
    variableOutput = `${start}${variableOutput}${end}`;
  }
  return variableOutput;
};
const printChainStepVariables = (state, step, stringOutput) => {
  var _a;
  if (!step) {
    return;
  }
  const stepVariable = printStepVariables(
    step,
    stringOutput
  );
  if (stepVariable) {
    stringOutput.output = `${stringOutput.output}
${stepVariable}`;
  }
  printChainStepVariables(
    state,
    (_a = step.link) == null ? void 0 : _a.root,
    stringOutput
  );
  printChainStepVariables(
    state,
    step.selected,
    stringOutput
  );
};
const printChainVariables = (state, step) => {
  var _a;
  const root = (_a = state.renderState.displayGuide) == null ? void 0 : _a.root;
  if (!root) {
    return;
  }
  let stringOutput = {
    output: "",
    nestingLevel: 0
  };
  printChainStepVariables(
    state,
    root,
    stringOutput
  );
  for (let i = 0; i < stringOutput.nestingLevel; i++) {
    stringOutput.output = `${stringOutput.output}</ul>`;
  }
  step.value = `${step.value}
${stringOutput.output}`;
};
const stepHook = {
  processStep: (state, step) => {
    try {
      const runProcess = runProcessStep(step);
      if (!runProcess) {
        return;
      }
      printChainVariables(
        state,
        step
      );
    } catch (exp) {
      console.log(exp);
    }
  }
};
registerStepHook();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
