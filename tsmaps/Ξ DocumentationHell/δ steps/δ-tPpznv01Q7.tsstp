¬import il from "../../shared/imageLinks"


#### Full Diagnostics and Intellisense

This isn't just a simple text substitution. Docs Assembler provides full language support:

###### Validation

The import statement is rigorously validated. The system checks that the file exists and is free of errors before you can publish.

###### Intellisense

As you type, you get code completion help to build both the import statement and the variable references correctly, dramatically reducing typos and errors.

You can easily navigate and understand your entire system. Right-clicking on any variable and selecting **'Go to Definition'** takes you directly to its source.

{{il.goToVariableDefinition_image}}

Here is the `imageLinks` variable file itself. Notice how you can even reference variables *within* other variable definitions, creating a powerful, reusable hierarchy of content.

{{il.imageLinksFile_image}}

This is a simple but powerful example of how Docs Assembler applies software engineering principles—like encapsulation, single source of truth, and robust tooling—to documentation.

###### Diagnostics

The system actively monitors for errors in real-time. If you reference a variable that doesn't exist, Docs Assembler immediately flags it with a clear diagnostic warning, preventing publication and guiding you to fix the issue.

**Example:**

The element below tries to reference the 'il.variable-does-not-exist'. Since this variable is not defined in the `imageLinks` file, the system generates a precise error, ensuring content remains accurate and build processes aren't broken by missing references.

{{il.fullDiagnosticsAndIntellisense_image}}

This is a simple but powerful example of how Docs Assembler applies software engineering principles—like encapsulation, single source of truth, and robust tooling—to documentation.

